{"version":3,"sources":["Delayed.jsx","index.js"],"names":["Delayed","props","state","hidden","setTimeout","setState","this","waitBeforeShow","children","React","Component","CheckForcommands","useState","setVal","useEffect","listener","event","code","alert","preventDefault","val","document","getElementById","value","ele","MyInput","ReactDOM","render","addEventListener","removeEventListener","type","id","placeholder","plc","myTopAr","scrapeSubreddit","a","r","snoowrap","userAgent","clientId","clientSecret","refreshToken","getSubreddit","subreddit","getNew","time","limit","getTop","topPosts","topdata","forEach","post","push","link","url","title","text","selftext","score","console","log","map","namae","index","MainBoad","className","name"],"mappings":"kQAyBeA,E,kDApBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAACC,QAAS,GAFR,E,gEAKE,IAAD,OAChBC,YAAW,WACP,EAAKC,SAAS,CAACF,QAAQ,MACxBG,KAAKL,MAAMM,kB,+BAId,OAAOD,KAAKJ,MAAMC,OAAS,GAAKG,KAAKL,MAAMO,a,GAd7BC,IAAMC,W,iBCG5B,SAASC,EAAiBV,GAAO,IAAD,EACNQ,IAAMG,SAAS,IADT,mBAChBC,GADgB,WAsB5B,OAnBAC,qBAAU,WACN,IAAMC,EAAW,SAAAC,GACb,IAAmB,UAAfA,EAAMC,MAAmC,gBAAfD,EAAMC,QAChCC,MAAM,iCACNF,EAAMG,iBACNN,GAAO,SAAAO,GAAG,OAAIA,EAAMC,SAASC,eAAe,eAAeC,SACP,WAAjDF,SAASC,eAAe,eAAeC,OAAmB,CACzD,IAAMC,EAAM,cAACC,EAAD,IAEZC,IAASC,OAAOH,EAAKH,SAASC,eAAe,qBAKzD,OADAD,SAASO,iBAAiB,UAAWb,GAC9B,WACHM,SAASQ,oBAAoB,UAAWd,MAE7C,IAGC,8BACI,+DAC+B,uBAAOe,KAAK,OAAOC,GAAG,cAAcC,YAAa/B,EAAMgC,WAMlG,SAASR,IAEL,IAAIS,EAAU,GAFC,SAGAC,IAHA,2EAGf,kCAAAC,EAAA,6DACUC,EAAI,IAAIC,IAAS,CACnBC,UAAW,mBACXC,SAAU,iBACVC,aAAc,iCACdC,aAAc,gDALtB,SAQ4BL,EAAEM,aAAatB,SAASC,eAAe,aAAaC,OARhF,cAQUqB,EARV,gBAS2BA,EAAUC,OAAO,CAACC,KAAM,OAAQC,MAAO,IATlE,8BAU2BH,EAAUI,OAAO,CAACF,KAAM,OAAQC,MAAO,KAVlE,OAUUE,EAVV,OAYQC,EAAU,GACA,GAEdD,EAASE,SAAQ,SAACC,GACdF,EAAQG,KAAK,CACTC,KAAMF,EAAKG,IACXC,MAAOJ,EAAKI,MACZC,KAAML,EAAKM,SACXC,MAAOP,EAAKO,MACZ5B,GAAIqB,EAAKrB,QAGjB6B,QAAQC,IAAIX,GAwDZhB,EAAQmB,KAAKH,GACbxB,IAASC,OAAOuB,EAAQY,KAAI,SAACC,EAAOC,GAAR,OACR,+BACI,0CACcD,EAAMP,SAEpB,0CACcO,EAAMJ,SAEpB,yCACaI,EAAMN,UARdO,MAWT3C,SAASC,eAAe,YA7FhD,6CAHe,sBAiHf,OAdAR,qBAAU,WACN,IAAMC,EAAW,SAAAC,GACM,UAAfA,EAAMC,MAAmC,gBAAfD,EAAMC,OAChC2C,QAAQC,IAAI,6CACZ7C,EAAMG,iBACNgB,MAIR,OADAd,SAASO,iBAAiB,UAAWb,GAC9B,WACHM,SAASQ,oBAAoB,UAAWd,MAE7C,CAACoB,IAGA,8BACI,eAAC,EAAD,CAAS5B,eAAgB,IAAzB,UACI,mDACA,cAAC,EAAD,CAASA,eAAgB,IAAzB,SACI,4BACI,eAAC,EAAD,CAASA,eAAgB,IAAzB,gBAEI,eAAC,EAAD,CAASA,eAAgB,IAAzB,iBAEI,eAAC,EAAD,CAASA,eAAgB,IAAzB,kBACI,eAAC,EAAD,CAASA,eAAgB,IAAzB,UACI,wDACwB,uBAAOuB,KAAK,OAAOC,GAAG,YAAYC,YAAY,sBAEtE,oBAAID,GAAG,iC,IAczCkC,E,uKAGE,OACI,sBAAKC,UAAU,WAAf,UACI,iDACI,+BACI,6CACA,gEACA,kDACA,6EAEJ,cAACvD,EAAD,CAAkBsB,IAAI,mB,GAZnBxB,IAAMC,WAqB7BgB,IAASC,OACL,cAAC,EAAD,CAAUwC,KAAK,aACf9C,SAASC,eAAe,U","file":"static/js/main.c546afa9.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Delayed extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {hidden : true};\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({hidden: false});\r\n        }, this.props.waitBeforeShow);\r\n    }\r\n\r\n    render() {\r\n        return this.state.hidden ? '' : this.props.children;\r\n    }\r\n}\r\n\r\nDelayed.propTypes = {\r\n    waitBeforeShow: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Delayed;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useEffect } from 'react';\nimport Delayed from './Delayed'\nimport snoowrap from 'snoowrap';\n\nfunction CheckForcommands(props){\n    const [val, setVal] = React.useState(\"\");\n\n    useEffect(() => {\n        const listener = event => {\n            if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n                alert(\"Please wait for posts to load\")\n                event.preventDefault();\n                setVal(val => val + document.getElementById(\"commandLine\").value);\n                if(document.getElementById(\"commandLine\").value === \"-begin\"){\n                    const ele = <MyInput>\n                    </MyInput>\n                    ReactDOM.render(ele, document.getElementById(\"command-result\"))\n                }\n            }\n        };\n        document.addEventListener(\"keydown\", listener);\n        return () => {\n            document.removeEventListener(\"keydown\", listener);\n        };\n    }, []);\n\n    return (\n        <div>\n            <form> \n                C://desktop/users/commands/<input type=\"text\" id=\"commandLine\" placeholder={props.plc}/>\n            </form>\n        </div>\n    );\n}\n\nfunction MyInput() {\n\n    let myTopAr = []\n    async function scrapeSubreddit() {\n        const r = new snoowrap({\n            userAgent: 'A random string.',\n            clientId: 'uYcds9ym9IRLBg',\n            clientSecret: 'jFkboj6UTkmpVUaSmPNnfK9S5Ppi7w',\n            refreshToken: '244083766827-hzwx_uMei4nOCtE9Y-TnypmVa_COqA'\n        });\n    \n        const subreddit = await r.getSubreddit(document.getElementById(\"rslashval\").value);\n        const newPosts = await subreddit.getNew({time: 'week', limit: 5});\n        const topPosts = await subreddit.getTop({time: 'week', limit: 50});\n    \n        let topdata = [];\n        let newdata = [];\n    \n        topPosts.forEach((post) => {\n            topdata.push({\n                link: post.url,\n                title: post.title,\n                text: post.selftext,\n                score: post.score,\n                id: post.id\n            })\n        });\n        console.log(topdata)\n    \n    /*    for (let x = 0; x < topdata.length; x++) {\n            console.log()\n            console.log()\n\n            const ele = <div>\n                            <p>\n                            \"Title: \"    {topdata[0][\"title\"].toString()}\n                            </p>\n                            <p>\n                            \"Score: \" {topdata[0][\"score\"].toString()}\n                            </p>\n                            <p>\n                                {topdata[0][\"text\"].toString()}\n                            </p>\n                            <p>\n                            \"Title: \"    {topdata[1][\"title\"].toString()}\n                            </p>\n                            <p>\n                            \"Score: \" {topdata[1][\"score\"].toString()}\n                            </p>\n                            <p>\n                                {topdata[1][\"text\"].toString()}\n                            </p>\n                            <p>\n                            \"Title: \"    {topdata[2][\"title\"].toString()}\n                            </p>\n                            <p>\n                            \"Score: \" {topdata[2][\"score\"].toString()}\n                            </p>\n                            <p>\n                                {topdata[2][\"text\"].toString()}\n                            </p>\n                            <p>\n                            \"Title: \"    {topdata[3][\"title\"].toString()}\n                            </p>\n                            <p>\n                            \"Score: \" {topdata[3][\"score\"].toString()}\n                            </p>\n                            <p>\n                                {topdata[3][\"text\"].toString()}\n                            </p>\n                            <p>\n                            \"Title: \"    {topdata[4][\"title\"].toString()}\n                            </p>\n                            <p>\n                            \"Score: \" {topdata[4][\"score\"].toString()}\n                            </p>\n                            <p>\n                                {topdata[4][\"text\"].toString()}\n                            </p>\n                        </div>\n            ReactDOM.render(ele, document.getElementById(\"r-slashdisplay\"));\n        } */\n\n        myTopAr.push(topdata)\n        ReactDOM.render(topdata.map((namae, index) => (\n                            <li key={index}>\n                                <p>\n                                    \"Title: \"{namae.title}\n                                </p>\n                                <p>\n                                    \"Score: \"{namae.score}\n                                </p>\n                                <p>\n                                    \"Text: \"{namae.text}\n                                </p>\n                            </li>\n                        )), document.getElementById(\"root-ul\"))\n    };\n\n    useEffect(() => {\n        const listener = event => {\n            if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n                console.log(\"Enter key was pressed. Run your function.\");\n                event.preventDefault();\n                scrapeSubreddit();\n            }\n        };\n        document.addEventListener(\"keydown\", listener);\n        return () => {\n            document.removeEventListener(\"keydown\", listener);\n        };\n    }, [scrapeSubreddit]);\n\n    return  (\n        <div> \n            <Delayed waitBeforeShow={500}>\n                <div>Loading form....</div>\n                <Delayed waitBeforeShow={450}>\n                    <p>\n                        <Delayed waitBeforeShow={200}>\n                            3..\n                            <Delayed waitBeforeShow={250}>\n                                2...\n                                <Delayed waitBeforeShow={275}>1....\n                                    <Delayed waitBeforeShow={500}>\n                                        <form> \n                                            C://desktop/users/r/<input type=\"text\" id=\"rslashval\" placeholder=\"subreddit name\"/>\n                                        </form>\n                                        <ul id=\"root-ul\">\n                                        </ul>\n                                    </Delayed>\n                                </Delayed>\n                            </Delayed>              \n                        </Delayed>\n                    </p>\n                    \n                </Delayed>\n            </Delayed>\n        </div>\n    );\n}\n\nclass MainBoad extends React.Component {\n\nrender() {\n        return (\n            <div className=\"commands\">\n                <h1>Reddit Terminal</h1>\n                    <ul>\n                        <li>type -begin</li>\n                        <li>get the top posts of subreddit</li>\n                        <li>or get new posts</li>\n                        <li>do not forget only post text can be read</li>\n                    </ul>\n                    <CheckForcommands plc=\"command\"/>\n            </div>\n        );\n}\n}        \n\n\n\n//Render\nReactDOM.render(\n    <MainBoad name=\"Shivansh\" />,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}