{"version":3,"sources":["Delayed.jsx","index.js"],"names":["Delayed","props","state","hidden","setTimeout","setState","this","waitBeforeShow","children","React","Component","CheckForcommands","useState","setVal","useEffect","listener","event","code","alert","preventDefault","val","document","getElementById","value","ele","MyInput","ReactDOM","render","addEventListener","removeEventListener","type","id","placeholder","plc","scrapeSubreddit","a","r","snoowrap","userAgent","clientId","clientSecret","refreshToken","inputVal","split","getSubreddit","subreddit","getNew","time","limit","newPosts","getTop","catch","url","title","text","score","topPosts","topdata","newdata","forEach","post","push","link","selftext","console","log","map","namae","index","indexOf","MainBoad","className"],"mappings":"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","file":"static/js/main.fa1444f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Delayed extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {hidden : true};\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({hidden: false});\r\n        }, this.props.waitBeforeShow);\r\n    }\r\n\r\n    render() {\r\n        return this.state.hidden ? '' : this.props.children;\r\n    }\r\n}\r\n\r\nDelayed.propTypes = {\r\n    waitBeforeShow: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Delayed;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useEffect } from 'react';\nimport Delayed from './Delayed'\nimport snoowrap from 'snoowrap';\n\nfunction CheckForcommands(props){\n    const [val, setVal] = React.useState(\"\");\n\n    useEffect(() => {\n        const listener = event => {\n            if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n                alert(\"Please wait for posts to load\")\n                event.preventDefault();\n                setVal(val => val + document.getElementById(\"commandLine\").value);\n                if(document.getElementById(\"commandLine\").value === \"-begin\"){\n                    const ele = <MyInput>\n                    </MyInput>\n                    ReactDOM.render(ele, document.getElementById(\"command-result\"))\n                }\n            }\n        };\n        document.addEventListener(\"keydown\", listener);\n        return () => {\n            document.removeEventListener(\"keydown\", listener);\n        };\n    }, []);\n\n    return (\n        <div>\n            <form> \n                C://desktop/users/commands/<input type=\"text\" id=\"commandLine\" placeholder={props.plc}/>\n            </form>\n        </div>\n    );\n}\n\nfunction MyInput() {\n\n    async function scrapeSubreddit() {\n        const r = new snoowrap({\n            userAgent: 'A random string.',\n            clientId: 'uYcds9ym9IRLBg',\n            clientSecret: 'jFkboj6UTkmpVUaSmPNnfK9S5Ppi7w',\n            refreshToken: '244083766827-hzwx_uMei4nOCtE9Y-TnypmVa_COqA'\n        });\n    \n\n        const inputVal = document.getElementById(\"rslashval\").value.split(\"-\");\n\n        const subreddit = await r.getSubreddit(inputVal[2]);\n        const newPosts = await subreddit.getNew({time: 'week', limit: 50});\n        const topPosts = await subreddit.getTop({time: 'week', limit: 50}).catch({\n            url: null,\n            title: \"Wrong name\",\n            text: \"Please Try Again\",\n            score: 0,\n            id: null\n        });\n    \n        let topdata = [];\n        let newdata = [];\n    \n        topPosts.forEach((post) => {\n            topdata.push({\n                link: post.url,\n                title: post.title,\n                text: post.selftext,\n                score: post.score,\n                id: post.id\n            })\n        });\n\n        newPosts.forEach((post) =>{\n            newdata.push({\n                link: post.url,\n                title: post.title,\n                text: post.selftext,\n                score: post.score,\n                id: post.id\n            })\n        })\n\n        console.log(topdata)\n        console.log(newdata)\n\n        \n\n        if (inputVal[1] === \"new\") {\n            ReactDOM.render(newdata.map((namae, index) => (\n                <li key={index}> {newdata.indexOf(namae)}\n                    <p>\n                        \"Title: \"{namae.title}\n                    </p>\n                    <p>\n                        \"Score: \"{namae.score}\n                    </p>\n                    <p>\n                        \"Text: \"{namae.text}\n                    </p>\n                </li>\n            )), document.getElementById(\"root-ul\"))\n        }\n\n        if(inputVal[1] === \"top\"){\n            ReactDOM.render(topdata.map((namae, index) => (\n                            <li key={index}>\n                                <p>\n                                    \"Title: \"{namae.title}\n                                </p>\n                                <p>\n                                    \"Score: \"{namae.score}\n                                </p>\n                                <p>\n                                    \"Text: \"{namae.text}\n                                </p>\n                            </li>\n                        )), document.getElementById(\"root-ul\"))\n        }\n    };\n\n    useEffect(() => {\n        const listener = event => {\n            if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n                console.log(\"Enter key was pressed. Run your function.\");\n                event.preventDefault();\n                scrapeSubreddit();\n            }\n        };\n        document.addEventListener(\"keydown\", listener);\n        return () => {\n            document.removeEventListener(\"keydown\", listener);\n        };\n    }, [scrapeSubreddit]);\n\n    return  (\n        <div> \n            <Delayed waitBeforeShow={500}>\n                <div>Loading form....</div>\n                <Delayed waitBeforeShow={450}>\n                    <p>\n                        <Delayed waitBeforeShow={200}>\n                            3..\n                            <Delayed waitBeforeShow={250}>\n                                2...\n                                <Delayed waitBeforeShow={275}>1....\n                                    <Delayed waitBeforeShow={500}>\n                                        <form> \n                                            C://desktop/users/r/<input type=\"text\" id=\"rslashval\" placeholder=\"subreddit name\"/>\n                                        </form>\n                                        <ul id=\"root-ul\">\n                                        </ul>\n                                    </Delayed>\n                                </Delayed>\n                            </Delayed>              \n                        </Delayed>\n                    </p>\n                    \n                </Delayed>\n            </Delayed>\n        </div>\n    );\n}\n\nclass MainBoad extends React.Component {\n\nrender() {\n        return (\n            <div className=\"commands\">\n                <h1>Reddit Terminal</h1>\n                    <ul>\n                        <li>type -begin</li>\n                        <li>format as: -top/new-subredditnme</li>\n                        <li>sample: -top-askreddit</li>\n                        <li>get the top posts of subreddit</li>\n                        <li>or get new posts</li>\n                        <li>do not forget only post text can be read</li>\n                    </ul>\n                    <CheckForcommands plc=\"command\"/>\n            </div>\n        );\n}\n}        \n\n\n\n//Render\nReactDOM.render(\n    <MainBoad />,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}